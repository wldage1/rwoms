<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xmlns="http://java.sun.com/xml/ns/javaee" 
xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" 
xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" 
id="WebApp_ID" version="2.5">
	<display-name>sw</display-name>
	<description></description>
	<!-- 定义Spring配置文件位置 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:applicationContext.xml</param-value>
	</context-param>
	
	<!-- Spring MVC的Servlet，它将加载WEB-INF/annomvc-servlet.xml的配置文件，以启动Spring MVC模块 -->  
	<servlet>  
	    <servlet-name>swfw</servlet-name>  
	    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>  
	    <load-on-startup>1</load-on-startup>  
	</servlet>  
	
	<servlet-mapping>  
	    <servlet-name>swfw</servlet-name>  
	    <url-pattern>/</url-pattern>  
	</servlet-mapping> 	
	
	<!-- URL重写filter,用于将访问静态资源http://localhost/foo.css 转为http://localhost/static/foo.css --> 
     <servlet-mapping>
         <servlet-name>default</servlet-name>
         <url-pattern>*.css</url-pattern>
     </servlet-mapping>
 
      <servlet-mapping>
         <servlet-name>default</servlet-name>
         <url-pattern>*.gif</url-pattern>
     </servlet-mapping>
     
      <servlet-mapping>
         <servlet-name>default</servlet-name>
         <url-pattern>*.swf</url-pattern>
     </servlet-mapping>     
     
    <servlet-mapping>
         <servlet-name>default</servlet-name>
         <url-pattern>*.jpg</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
         <servlet-name>default</servlet-name>
         <url-pattern>*.png</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
         <servlet-name>default</servlet-name>
         <url-pattern>*.js</url-pattern>
    </servlet-mapping>	
    
   	<servlet-mapping>
   		 <servlet-name>default</servlet-name>
         <url-pattern>*.pdf</url-pattern>
    </servlet-mapping>
	
	<!-- 编码处理过滤器 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>utf-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	
	<!-- 登录验证码校验 -->
	<filter>
		<filter-name>loginJCaptchaFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<param-name>targetFilterLifecycle</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	
	<!-- 验证码图片生成 -->
	<filter>
		<filter-name>jCaptchaFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<param-name>targetFilterLifecycle</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>		
	
	<!-- Spring Security过滤器 -->
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>   
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>	
	

	
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- 验证码图片 -->
	<filter-mapping>
		<filter-name>jCaptchaFilter</filter-name>
		<url-pattern>/captcha.jpg</url-pattern>
	</filter-mapping>
	
	<!-- 登录验证码表单处理URL.必须放在springSecurityFilter的filter-mapping之前 -->
	<!-- 
	<filter-mapping>
		<filter-name>loginJCaptchaFilter</filter-name>
		<url-pattern>/j_spring_security_check</url-pattern>
	</filter-mapping>
	 -->
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
    <!-- 对Spring容器进行实例化 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	<!-- Spring刷新Introspector防止内存泄露 -->
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>	
	
	
	<!-- sitemesh修饰器 -->
	
	<filter>
		<filter-name>sitemesh</filter-name>
		<filter-class>com.opensymphony.module.sitemesh.filter.PageFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>sitemesh</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>	
	
	<!-- Session超时定义,单位为分钟 -->
	<session-config>
		<session-timeout>60</session-timeout>
	</session-config>

	<!-- 定义默认访问页 -->
	<welcome-file-list>
		<welcome-file>index</welcome-file>
		<welcome-file>index.html</welcome-file>
		<welcome-file>index.do</welcome-file>
	</welcome-file-list>
	
	<!-- 出错页面定义 -->
	<error-page>
		<exception-type>java.lang.Throwable</exception-type>
		<location>/html/error_page.html</location>
	</error-page>
		<error-page>
		<error-code>500</error-code>
		<location>/html/error_page_500.html</location>
	</error-page>
	<error-page>
		<error-code>404</error-code>
		<location>/html/error_page_404.html</location>
	</error-page>
	<error-page>
		<error-code>403</error-code>
		<location>/html/error_page_403.html</location>
	</error-page>
</web-app>